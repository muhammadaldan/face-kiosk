{"version":3,"sources":["useModel.js","object-detection-video/useWebcam.js","object-detection-video/retina-canvas.js","object-detection-video/render-predictions.js","object-detection-video/ObjectDetectionVideo.js","index.js"],"names":["useModel","modelPath","_useState","useState","_useState2","Object","slicedToArray","model","setModel","useEffect","models","load","then","useWebcam","videoRef","onLoaded","navigator","mediaDevices","getUserMedia","audio","video","facingMode","width","ideal","height","stream","current","srcObject","onloadedmetadata","getRetinaContext","canvas","ctx","getContext","scale","window","devicePixelRatio","setWidth","w","style","setHeight","h","clearAll","clearRect","x","y","setFont","font","size","parseInt","retinaFont","replace","setTextBaseLine","textBaseline","setStrokeStyle","strokeStyle","setLineWidth","lineWidth","strokeRect","setFillStyle","fillStyle","measureText","text","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","fillRect","fillText","client","require","connect","getLabelText","prediction","scoreText","score","toFixed","concat","label","on","subscribe","send","topic","message","readOnlyError","toString","renderPredictions","predictions","textHeight","forEach","bbox","predictionText","dataSend","publish","includes","Math","round","textWidth","border","xPadding","yPadding","ObjectDetectionVideo","React","memo","_ref","onPrediction","fit","mirrored","render","useRef","canvasRef","detectFrame","useCallback","asyncToGenerator","regenerator_default","a","mark","_callee","wantedWidth","wantedHeight","videoWidth","videoHeight","scaleX","scaleY","xOffset","yOffset","offsetPredictions","wrap","_context","prev","next","detect","sent","offsetWidth","offsetHeight","min","max","map","objectSpread2","requestAnimationFrame","stop","position","left","top","objectFit","transform","react_default","createElement","autoPlay","playsInline","muted","ref","App","className","object_detection_video_ObjectDetectionVideo","rootElement","document","getElementById","ReactDOM","src_App"],"mappings":"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","file":"static/js/main.a020954e.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nimport models from '@cloud-annotations/models'\r\n\r\nconst useModel = (modelPath) => {\r\n  const [model, setModel] = useState()\r\n  useEffect(() => {\r\n    models.load(modelPath).then((model) => {\r\n      setModel(model)\r\n    })\r\n  }, [modelPath])\r\n  return model\r\n}\r\n\r\nexport default useModel\r\n","import { useEffect } from 'react'\r\n\r\nconst useWebcam = (videoRef, onLoaded) => {\r\n  useEffect(() => {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      navigator.mediaDevices\r\n        .getUserMedia({\r\n          audio: false,\r\n          video: {\r\n            facingMode: 'user',\r\n            width: { ideal: 4096 },\r\n            height: { ideal: 2160 },\r\n          },\r\n        })\r\n        .then((stream) => {\r\n          videoRef.current.srcObject = stream\r\n          videoRef.current.onloadedmetadata = () => {\r\n            onLoaded()\r\n          }\r\n        })\r\n    }\r\n  }, [onLoaded, videoRef])\r\n}\r\n\r\nexport default useWebcam\r\n","export const getRetinaContext = (canvas) => {\r\n  const ctx = canvas.getContext('2d')\r\n  const scale = window.devicePixelRatio\r\n  let width = canvas.width / scale\r\n  let height = canvas.height / scale\r\n  return {\r\n    setWidth: (w) => {\r\n      width = w\r\n      canvas.style.width = w + 'px'\r\n      canvas.width = w * scale\r\n    },\r\n    setHeight: (h) => {\r\n      height = h\r\n      canvas.style.height = h + 'px'\r\n      canvas.height = h * scale\r\n    },\r\n    width: width,\r\n    height: height,\r\n    clearAll: () => {\r\n      return ctx.clearRect(0, 0, width * scale, height * scale)\r\n    },\r\n    clearRect: (x, y, width, height) => {\r\n      return ctx.clearRect(x * scale, y * scale, width * scale, height * scale)\r\n    },\r\n    setFont: (font) => {\r\n      const size = parseInt(font, 10) * scale\r\n      const retinaFont = font.replace(/^\\d+px/, size + 'px')\r\n      ctx.font = retinaFont\r\n    },\r\n    setTextBaseLine: (textBaseline) => {\r\n      ctx.textBaseline = textBaseline\r\n    },\r\n    setStrokeStyle: (strokeStyle) => {\r\n      ctx.strokeStyle = strokeStyle\r\n    },\r\n    setLineWidth: (lineWidth) => {\r\n      ctx.lineWidth = lineWidth * scale\r\n    },\r\n    strokeRect: (x, y, width, height) => {\r\n      return ctx.strokeRect(x * scale, y * scale, width * scale, height * scale)\r\n    },\r\n    setFillStyle: (fillStyle) => {\r\n      ctx.fillStyle = fillStyle\r\n    },\r\n    measureText: (text) => {\r\n      const metrics = ctx.measureText(text)\r\n      return {\r\n        width: metrics.width / scale,\r\n        actualBoundingBoxLeft: metrics.actualBoundingBoxLeft / scale,\r\n        actualBoundingBoxRight: metrics.actualBoundingBoxRight / scale,\r\n        actualBoundingBoxAscent: metrics.actualBoundingBoxAscent / scale,\r\n        actualBoundingBoxDescent: metrics.actualBoundingBoxDescent / scale,\r\n      }\r\n    },\r\n    fillRect: (x, y, width, height) => {\r\n      return ctx.fillRect(x * scale, y * scale, width * scale, height * scale)\r\n    },\r\n    fillText: (text, x, y) => {\r\n      return ctx.fillText(text, x * scale, y * scale)\r\n    },\r\n  }\r\n}\r\n","const mqtt = require(\"mqtt\");\r\nconst client = mqtt.connect(\"mqtt://127.0.0.1:1884\");\r\n\r\nconst getLabelText = (prediction) => {\r\n  const scoreText = (prediction.score * 100).toFixed(1);\r\n  return `${prediction.label} ${scoreText}%`;\r\n};\r\n\r\nclient.on(\"connect\", function () {\r\n  client.subscribe(\"mask\");\r\n});\r\n\r\nconst send = \"false\";\r\n\r\nclient.on(\"message\", function (topic, message) {\r\n  // message is Buffer\r\n  send = message.toString();\r\n});\r\n\r\nexport const renderPredictions = (ctx, predictions) => {\r\n  // Font options.\r\n  const font = `${16}px 'ibm-plex-sans', Helvetica Neue, Arial, sans-serif`;\r\n  ctx.setFont(font);\r\n  ctx.setTextBaseLine(\"top\");\r\n  const border = 4;\r\n  const xPadding = 16;\r\n  const yPadding = 8;\r\n  const offset = 6;\r\n  const textHeight = parseInt(font, 10); // base 10\r\n  // if (predictions.length === 0) {\r\n  //   client.publish(\"data\", \"no,#\");\r\n  // }\r\n\r\n  predictions.forEach((prediction) => {\r\n    const x = prediction.bbox[0];\r\n    const y = prediction.bbox[1];\r\n    const width = prediction.bbox[2];\r\n    const height = prediction.bbox[3];\r\n\r\n    const predictionText = getLabelText(prediction);\r\n    const dataSend = predictionText[0] == \"M\" ? \"true,#\" : \"false,#\";\r\n    if (send === \"true\") {\r\n      client.publish(\"data\", dataSend);\r\n      client.publish(\"mask\", \"stop\");\r\n    }\r\n    // console.log(predictionText);\r\n    // console.log(predictionText.includes(\"No\"));\r\n    if (predictionText.includes(\"No\")) {\r\n      // Draw the bounding box.\r\n      //console.log(predictionText)\r\n      ctx.setStrokeStyle(\"#FF0000\");\r\n      ctx.setLineWidth(border);\r\n    } else {\r\n      ctx.setStrokeStyle(\"#00FF00\");\r\n      ctx.setLineWidth(border);\r\n    }\r\n\r\n    ctx.strokeRect(\r\n      Math.round(x),\r\n      Math.round(y),\r\n      Math.round(width),\r\n      Math.round(height)\r\n    );\r\n    // Draw the label background.\r\n    if (predictionText.includes(\"No\")) {\r\n      ctx.setFillStyle(\"#FF0000\");\r\n    } else {\r\n      ctx.setFillStyle(\"#00FF00\");\r\n    }\r\n    const textWidth = ctx.measureText(predictionText).width;\r\n    ctx.fillRect(\r\n      Math.round(x - border / 2),\r\n      Math.round(y - (textHeight + yPadding) - offset),\r\n      Math.round(textWidth + xPadding),\r\n      Math.round(textHeight + yPadding)\r\n    );\r\n  });\r\n\r\n  predictions.forEach((prediction) => {\r\n    const x = prediction.bbox[0];\r\n    const y = prediction.bbox[1];\r\n\r\n    const predictionText = getLabelText(prediction);\r\n    // Draw the text last to ensure it's on top.\r\n    ctx.setFillStyle(\"#ffffff\");\r\n    ctx.fillText(\r\n      predictionText,\r\n      Math.round(x - border / 2 + xPadding / 2),\r\n      Math.round(y - (textHeight + yPadding) - offset + yPadding / 2)\r\n    );\r\n  });\r\n};\r\n","import React, { useRef, useCallback } from \"react\";\r\n\r\nimport useWebcam from \"./useWebcam\";\r\nimport { getRetinaContext } from \"./retina-canvas\";\r\nimport { renderPredictions } from \"./render-predictions\";\r\n\r\nconst ObjectDetectionVideo = React.memo(\r\n  ({ model, onPrediction, fit, mirrored, render }) => {\r\n    const videoRef = useRef();\r\n    const canvasRef = useRef();\r\n\r\n    useWebcam(videoRef, () => {\r\n      detectFrame();\r\n    });\r\n\r\n    const detectFrame = useCallback(async () => {\r\n      const predictions = await model.detect(videoRef.current);\r\n      if (onPrediction) {\r\n        onPrediction(predictions);\r\n      }\r\n\r\n      const wantedWidth = videoRef.current.offsetWidth;\r\n      const wantedHeight = videoRef.current.offsetHeight;\r\n      const videoWidth = videoRef.current.videoWidth;\r\n      const videoHeight = videoRef.current.videoHeight;\r\n\r\n      const scaleX = wantedWidth / videoWidth;\r\n      const scaleY = wantedHeight / videoHeight;\r\n\r\n      let scale;\r\n      if (fit === \"aspectFit\") {\r\n        scale = Math.min(scaleX, scaleY);\r\n      } else {\r\n        scale = Math.max(scaleX, scaleY);\r\n      }\r\n\r\n      const xOffset = (wantedWidth - videoWidth * scale) / 2;\r\n      const yOffset = (wantedHeight - videoHeight * scale) / 2;\r\n\r\n      const ctx = getRetinaContext(canvasRef.current);\r\n\r\n      ctx.setWidth(wantedWidth);\r\n      ctx.setHeight(wantedHeight);\r\n      ctx.clearAll();\r\n\r\n      // Update predictions to match canvas.\r\n      const offsetPredictions = predictions.map((prediction) => {\r\n        let x = prediction.bbox[0] * scale + xOffset;\r\n        const y = prediction.bbox[1] * scale + yOffset;\r\n        const width = prediction.bbox[2] * scale;\r\n        const height = prediction.bbox[3] * scale;\r\n\r\n        if (mirrored) {\r\n          x = wantedWidth - x - width;\r\n        }\r\n        return { ...prediction, bbox: [x, y, width, height] };\r\n      });\r\n\r\n      const renderFunction = render || renderPredictions;\r\n\r\n      renderFunction(ctx, offsetPredictions);\r\n      requestAnimationFrame(() => {\r\n        detectFrame();\r\n      });\r\n    }, [fit, mirrored, model, onPrediction, render]);\r\n\r\n    if (canvasRef.current) {\r\n      canvasRef.current.style.position = \"absolute\";\r\n      canvasRef.current.style.left = \"0\";\r\n      canvasRef.current.style.top = \"0\";\r\n    }\r\n\r\n    if (videoRef.current) {\r\n      videoRef.current.style.width = \"100%\";\r\n      videoRef.current.style.height = \"100%\";\r\n      if (fit === \"aspectFit\") {\r\n        videoRef.current.style.objectFit = \"contain\";\r\n      } else {\r\n        videoRef.current.style.objectFit = \"cover\";\r\n      }\r\n\r\n      if (mirrored) {\r\n        videoRef.current.style.transform = \"scaleX(-1)\";\r\n      } else {\r\n        videoRef.current.style.transform = \"scaleX(1)\";\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ position: \"relative\" }}>\r\n        <video autoPlay playsInline muted ref={videoRef} />\r\n        <canvas ref={canvasRef} />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default ObjectDetectionVideo;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport useModel from \"./useModel\";\r\nimport ObjectDetectionVideo from \"./object-detection-video/ObjectDetectionVideo\";\r\n\r\nimport \"./index.css\";\r\n\r\nconst handlePrediction = (predictions) => {\r\n  console.timeEnd(\"detect\");\r\n  console.time(\"detect\");\r\n  console.log(predictions);\r\n};\r\n\r\nconst render = (ctx, predictions) => {\r\n  predictions.forEach((prediction) => {\r\n    const x = prediction.bbox[0];\r\n    const y = prediction.bbox[1];\r\n    const width = prediction.bbox[2];\r\n    const height = prediction.bbox[3];\r\n\r\n    ctx.setStrokeStyle(\"#0062ff\");\r\n    ctx.setLineWidth(4);\r\n    ctx.strokeRect(\r\n      Math.round(x),\r\n      Math.round(y),\r\n      Math.round(width),\r\n      Math.round(height)\r\n    );\r\n  });\r\n};\r\n\r\nconst App = () => {\r\n  const model = useModel(process.env.PUBLIC_URL + \"/model_web\");\r\n\r\n  return (\r\n    <div className=\"fillPage\">\r\n      <ObjectDetectionVideo\r\n        model={model}\r\n        // onPrediction={handlePrediction}\r\n        // render={render}\r\n        // aspectFill: The option to scale the video to fill the size of the view.\r\n        //             Some portion of the video may be clipped to fill the view's\r\n        //             bounds.\r\n        // aspectFit:  The option to scale the video to fit the size of the view\r\n        //             by maintaining the aspect ratio. Any remaining area of the\r\n        //             view's bounds is transparent.\r\n        fit=\"aspectFill\"\r\n        // mirrored:   mirror the video about its vertical axis.\r\n        mirrored\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}